// Code generated by go-swagger; DO NOT EDIT.

// Copyright Prometheus Team
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package alert

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// OpenapiPostAlertsReader is a Reader for the OpenapiPostAlerts structure.
type OpenapiPostAlertsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *OpenapiPostAlertsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewOpenapiPostAlertsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewOpenapiPostAlertsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewOpenapiPostAlertsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewOpenapiPostAlertsOK creates a OpenapiPostAlertsOK with default headers values
func NewOpenapiPostAlertsOK() *OpenapiPostAlertsOK {
	return &OpenapiPostAlertsOK{}
}

/*OpenapiPostAlertsOK handles this case with default header values.

Create alerts response
*/
type OpenapiPostAlertsOK struct {
}

func (o *OpenapiPostAlertsOK) Error() string {
	return fmt.Sprintf("[POST /openapi/{tenantId}/alerts][%d] openapiPostAlertsOK ", 200)
}

func (o *OpenapiPostAlertsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewOpenapiPostAlertsBadRequest creates a OpenapiPostAlertsBadRequest with default headers values
func NewOpenapiPostAlertsBadRequest() *OpenapiPostAlertsBadRequest {
	return &OpenapiPostAlertsBadRequest{}
}

/*OpenapiPostAlertsBadRequest handles this case with default header values.

Bad request
*/
type OpenapiPostAlertsBadRequest struct {
	Payload string
}

func (o *OpenapiPostAlertsBadRequest) Error() string {
	return fmt.Sprintf("[POST /openapi/{tenantId}/alerts][%d] openapiPostAlertsBadRequest  %+v", 400, o.Payload)
}

func (o *OpenapiPostAlertsBadRequest) GetPayload() string {
	return o.Payload
}

func (o *OpenapiPostAlertsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOpenapiPostAlertsInternalServerError creates a OpenapiPostAlertsInternalServerError with default headers values
func NewOpenapiPostAlertsInternalServerError() *OpenapiPostAlertsInternalServerError {
	return &OpenapiPostAlertsInternalServerError{}
}

/*OpenapiPostAlertsInternalServerError handles this case with default header values.

Internal server error
*/
type OpenapiPostAlertsInternalServerError struct {
	Payload string
}

func (o *OpenapiPostAlertsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /openapi/{tenantId}/alerts][%d] openapiPostAlertsInternalServerError  %+v", 500, o.Payload)
}

func (o *OpenapiPostAlertsInternalServerError) GetPayload() string {
	return o.Payload
}

func (o *OpenapiPostAlertsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
